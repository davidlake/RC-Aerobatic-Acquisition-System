function [tALT,ALT_altitude,tGPS,GPS_pos,GPS_posLLA,GPS_vel,GPS_groundS,GPS_course,tIMU,IMU_acc,IMU_angV,IMU_magF] = generateSensorDataN(fsAltimeter,idealALT,fsGPS,idealGPS,refLoc,fsIMU,idealIMU,trajectory)
%% Simulate altimeter sensor data
    if idealALT 
        altimeter = altimeterSensor('SampleRate',fsAltimeter,'ReferenceFrame','NED');
    else
        altimeter = altimeterSensor('SampleRate',fsAltimeter,...
                                    'ReferenceFrame','NED',...
                                    'ConstantBias',0.01,...
                                    'NoiseDensity',0.05,...
                                    'BiasInstability',0.05,...
                                    'DecayFactor',0.5);  
    end
    trajectory.SampleRate = fsAltimeter;
    reset(trajectory);
    nElementsAltimeter = round(trajectory.TimeOfArrival(end)*trajectory.SampleRate)-1;
    truePositionAltimeter = zeros(nElementsAltimeter,3); 
    c = 1;
    while ~isDone(trajectory)
       [truePositionAltimeter(c,:),~,~,~,~] = trajectory();
       c = c + 1;
    end
    ALT_altitude = -altimeter(truePositionAltimeter);
    tALT = 0:1/fsAltimeter:1/fsAltimeter*(nElementsAltimeter-1);
%% Simulate GPS receiver data
    if idealGPS
        GPS = gpsSensor('SampleRate',fsGPS,...
                        'ReferenceFrame','NED','ReferenceLocation',refLoc); 
    else
        GPS = gpsSensor('SampleRate',fsGPS,...
                        'ReferenceFrame','NED','ReferenceLocation',refLoc,...
                        'HorizontalPositionAccuracy',1.6,'VerticalPositionAccuracy',3,'VelocityAccuracy',0.1,...
                        'DecayFactor',0.5); 
    end
    trajectory.SampleRate = fsGPS;
    reset(trajectory);
    nElementsGPS = round(trajectory.TimeOfArrival(end)*trajectory.SampleRate)-1;
    truePositionGPS = zeros(nElementsGPS,3); 
    trueVelocityGPS = zeros(nElementsGPS,3);
    c = 1;
    while ~isDone(trajectory)
       [truePositionGPS(c,:),~,trueVelocityGPS(c,:),~,~] = trajectory();
       c = c + 1;
    end
    [GPS_posLLA,GPS_vel,GPS_groundS,GPS_course] = GPS(truePositionGPS,trueVelocityGPS);
    GPS_pos = lla2flat(GPS_posLLA,refLoc(1:2),0,-refLoc(3));
    % [gps_Position2(:,1),gps_Position2(:,2),gps_Position2(:,3)] = latlon2local(positionLLA(:,1),positionLLA(:,2),positionLLA(:,3),refLoc);
    tGPS = 0:1/fsGPS:1/fsGPS*nElementsGPS;
%% Simulate IMU sensor data
    if idealIMU
        accPar = accelparams;   
        gyroPar = gyroparams;
        magPar = magparams;
    else
        accPar = accelparams('MeasurementRange',(4*9.81),'Resolution',0.0012, ...
                             'ConstantBias', 0.19,...%0.4905,...
                             'AxesMisalignment',0,...
                             'NoiseDensity',0.0012356,...%0.0023,...
                             'BiasInstability',0,...$ 0.05,...%
                             'RandomWalk',0,...%0.1,...
                             'TemperatureBias',0,...%0.0102,...
                             'TemperatureScaleFactor',0);...%0.026);   
        gyroPar = gyroparams('MeasurementRange',17.4533,'Resolution',5.3211e-04, ...
                             'ConstantBias',0.0545,...%0.0873,...
                             'AxesMisalignment',1.5,...
                             'NoiseDensity',0.00043633,...2.6180e-04,...
                             'BiasInstability',0,...%0.05,...%
                             'RandomWalk',0,...%0.1,...
                             'TemperatureBias',0,...%8.7266e-04,
                             'TemperatureScaleFactor',0,...%,0.5236,...
                             'AccelerationBias',0);
        magPar = magparams('MeasurementRange',4900,'Resolution',0.15, ...
                           'ConstantBias',100,...%0,...
                           'AxesMisalignment',0,...%1,...
                           'NoiseDensity',0.0424,...%0.003,...
                           'BiasInstability',0,...%0.05,...
                           'RandomWalk',0,...%0.1,...
                           'TemperatureBias',0,...%0.002,
                           'TemperatureScaleFactor',0);
    end
    IMU = imuSensor('accel-gyro-mag', 'ReferenceFrame', 'NED', 'SampleRate', fsIMU,...
                    'Temperature', 25,...
                    'MagneticField', [24.11475 -0.7018 38.9986],...
                    'Accelerometer',accPar,'Gyroscope',gyroPar,'Magnetometer',magPar);
    trajectory.SampleRate = fsIMU;
    reset(trajectory);
    nElementsIMU = round(trajectory.TimeOfArrival(end)*trajectory.SampleRate)-1;
    trueAccelerationIMU = zeros(nElementsIMU,3);
    trueAngularVelocityIMU = zeros(nElementsIMU,3); 
    trueOrientationIMU = zeros(nElementsIMU,1,'quaternion');
    c = 1;
    while ~isDone(trajectory)
       [~,trueOrientationIMU(c),~,trueAccelerationIMU(c,:),trueAngularVelocityIMU(c,:)] = trajectory();
       c = c + 1;
    end
    [IMU_acc,IMU_angV,IMU_magF] = IMU(trueAccelerationIMU,trueAngularVelocityIMU,trueOrientationIMU);
    tIMU = 0:1/fsIMU:1/fsIMU*nElementsIMU;
end

